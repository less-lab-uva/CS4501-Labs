// Generated by gencpp from file sensor_simulation/calibrateResponse.msg
// DO NOT EDIT!


#ifndef SENSOR_SIMULATION_MESSAGE_CALIBRATERESPONSE_H
#define SENSOR_SIMULATION_MESSAGE_CALIBRATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_simulation
{
template <class ContainerAllocator>
struct calibrateResponse_
{
  typedef calibrateResponse_<ContainerAllocator> Type;

  calibrateResponse_()
    : baseline(0.0)  {
    }
  calibrateResponse_(const ContainerAllocator& _alloc)
    : baseline(0.0)  {
  (void)_alloc;
    }



   typedef double _baseline_type;
  _baseline_type baseline;





  typedef boost::shared_ptr< ::sensor_simulation::calibrateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_simulation::calibrateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct calibrateResponse_

typedef ::sensor_simulation::calibrateResponse_<std::allocator<void> > calibrateResponse;

typedef boost::shared_ptr< ::sensor_simulation::calibrateResponse > calibrateResponsePtr;
typedef boost::shared_ptr< ::sensor_simulation::calibrateResponse const> calibrateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_simulation::calibrateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_simulation::calibrateResponse_<ContainerAllocator1> & lhs, const ::sensor_simulation::calibrateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.baseline == rhs.baseline;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_simulation::calibrateResponse_<ContainerAllocator1> & lhs, const ::sensor_simulation::calibrateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_simulation::calibrateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_simulation::calibrateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_simulation::calibrateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2d73167cca4d93dc55c783a92c0ef21";
  }

  static const char* value(const ::sensor_simulation::calibrateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2d73167cca4d93dULL;
  static const uint64_t static_value2 = 0xc55c783a92c0ef21ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_simulation/calibrateResponse";
  }

  static const char* value(const ::sensor_simulation::calibrateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 baseline\n"
;
  }

  static const char* value(const ::sensor_simulation::calibrateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.baseline);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calibrateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_simulation::calibrateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_simulation::calibrateResponse_<ContainerAllocator>& v)
  {
    s << indent << "baseline: ";
    Printer<double>::stream(s, indent + "  ", v.baseline);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_SIMULATION_MESSAGE_CALIBRATERESPONSE_H
