// Generated by gencpp from file altitude/AltitudeStamped.msg
// DO NOT EDIT!


#ifndef ALTITUDE_MESSAGE_ALTITUDESTAMPED_H
#define ALTITUDE_MESSAGE_ALTITUDESTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace altitude
{
template <class ContainerAllocator>
struct AltitudeStamped_
{
  typedef AltitudeStamped_<ContainerAllocator> Type;

  AltitudeStamped_()
    : value(0.0)
    , error(0.0)
    , stamp()  {
    }
  AltitudeStamped_(const ContainerAllocator& _alloc)
    : value(0.0)
    , error(0.0)
    , stamp()  {
  (void)_alloc;
    }



   typedef double _value_type;
  _value_type value;

   typedef double _error_type;
  _error_type error;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;





  typedef boost::shared_ptr< ::altitude::AltitudeStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::altitude::AltitudeStamped_<ContainerAllocator> const> ConstPtr;

}; // struct AltitudeStamped_

typedef ::altitude::AltitudeStamped_<std::allocator<void> > AltitudeStamped;

typedef boost::shared_ptr< ::altitude::AltitudeStamped > AltitudeStampedPtr;
typedef boost::shared_ptr< ::altitude::AltitudeStamped const> AltitudeStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::altitude::AltitudeStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::altitude::AltitudeStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::altitude::AltitudeStamped_<ContainerAllocator1> & lhs, const ::altitude::AltitudeStamped_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value &&
    lhs.error == rhs.error &&
    lhs.stamp == rhs.stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::altitude::AltitudeStamped_<ContainerAllocator1> & lhs, const ::altitude::AltitudeStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace altitude

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::altitude::AltitudeStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::altitude::AltitudeStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::altitude::AltitudeStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::altitude::AltitudeStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::altitude::AltitudeStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::altitude::AltitudeStamped_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::altitude::AltitudeStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c968dc1a73aaba47876f967a1cb52374";
  }

  static const char* value(const ::altitude::AltitudeStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc968dc1a73aaba47ULL;
  static const uint64_t static_value2 = 0x876f967a1cb52374ULL;
};

template<class ContainerAllocator>
struct DataType< ::altitude::AltitudeStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "altitude/AltitudeStamped";
  }

  static const char* value(const ::altitude::AltitudeStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::altitude::AltitudeStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 value\n"
"float64 error\n"
"time stamp\n"
;
  }

  static const char* value(const ::altitude::AltitudeStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::altitude::AltitudeStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
      stream.next(m.error);
      stream.next(m.stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AltitudeStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::altitude::AltitudeStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::altitude::AltitudeStamped_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
    s << indent << "error: ";
    Printer<double>::stream(s, indent + "  ", v.error);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALTITUDE_MESSAGE_ALTITUDESTAMPED_H
